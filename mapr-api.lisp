;;;; -*- Mode: LISP; Base: 10; Syntax: ANSI-Common-lisp; Package: CL-MAPRCLI -*-

(in-package "cl-maprcli")


;; MapR CLI basic Context info
(defparameter *context* '((:host . "http://localhost:8443/rest")
                          (:basic-authorization . ("mapr" "mapr"))
                          (:output . :pretty)))

;; setter/getter context info
(defun set-host (host)
  "setter for host name. ex: (set-host \"https://192.168.2.51:8443/rest\")"
  (let ((ctx (assoc :host *context*)))
    (when ctx
      (rplacd ctx host))))

(defun set-output-option (option)
  (let ((ctx (assoc :output *context*)))
    (when ctx
      (rplacd ctx option))))

(defun set-authorization (auth)
  "setter for autorization info. ex: (set-authorization (list \"mapr\" \"mapr\"))"
  (let ((ctx (assoc :basic-authorization *context*)))
    (when ctx
      (rplacd ctx auth))))

(defun list-to-alist (olist)
  "convert list to alist."
  (when (and olist (evenp (length olist)))
    (cons (cons (car olist) (cadr olist)) (list-to-alist (cddr olist)))))

(defun get-val (item alist)
  "getter for alist"
  (cdr (assoc item alist)))

(defun make-inputformat-from-user (rest)
  "convert user input list into parameter type.
   ex: (make-inputformat-from-user '(:a 1 :b 2 :host \"abc\" :basic-authorization '(\"m\" \"m\")))"
  (let* ((alist (list-to-alist rest))
         (output (let ((tmp (get-val :output alist)))
                   (if tmp (progn
                             (setf alist (remove-assoc :output alist))
                             tmp)
                       (get-val :output *context*))))
         (host  (let ((tmp (get-val :host alist)))
                  (if tmp (progn
                            (setf alist (remove-assoc :host alist))
                            tmp)
                      (get-val :host *context*))))
         (basic-authorization  (let ((tmp (get-val :basic-authorization alist)))
                                 (if tmp (progn
                                           (setf alist (remove-assoc :basic-authorization alist))
                                           tmp)
                                     (get-val :basic-authorization *context*)))))
    (values host basic-authorization alist output)))


(defmacro maprcli (cmd-path &rest rest)
  "run maprcli command. ex: (maprcli \"/VOLUME/INFO\" :path \"/\")"
  `(multiple-value-bind (host basic-authorization alist output)
       (make-inputformat-from-user ',rest)
     (rest-call host ,cmd-path basic-authorization alist output)))

;;(maprcli "/volume/info" :path "/" :output :pretty)
;;(maprcli "/table/region/list" :path "/chatbot.prod/insa_master_002" :output :pretty)


(defmacro maprcli-defs (cmd-path)
  "macro for creating maprcli request functions"
  (let ((function-name (intern (string-upcase (subseq (substitute #\- #\/ cmd-path) 1)))))
    `(defun ,function-name (&rest rest)
       (multiple-value-bind (host basic-authorization alist output)
           (make-inputformat-from-user rest)
         (rest-call host ,cmd-path basic-authorization alist output)))))

;;(macroexpand-1 '(maprcli-defs "/volume/info"))


;;; making functions for maprcli
(maprcli-defs "/ACL/EDIT")
(maprcli-defs "/ACL/SET")
(maprcli-defs "/ACL/SHOW")
(maprcli-defs "/ALARM/CLEAR")
(maprcli-defs "/ALARM/CLEARALL")
(maprcli-defs "/ALARM/CONFIG/LOAD")
(maprcli-defs "/ALARM/CONFIG/SAVE")
(maprcli-defs "/ALARM/LIST")
(maprcli-defs "/ALARM/NAMES")
(maprcli-defs "/ALARM/RAISE")
(maprcli-defs "/AUDIT/CLUSTER")
(maprcli-defs "/AUDIT/DATA")
(maprcli-defs "/AUDIT/INFO")
(maprcli-defs "/CLUSTER/GATEWAY/DELETE")
(maprcli-defs "/CLUSTER/GATEWAY/GET")
(maprcli-defs "/CLUSTER/GATEWAY/LIST")
(maprcli-defs "/CLUSTER/GATEWAY/LOCAL")
(maprcli-defs "/CLUSTER/GATEWAY/RESOLVE")
(maprcli-defs "/CLUSTER/GATEWAY/SET")
(maprcli-defs "/CLUSTER/MAPREDUCE/GET")
(maprcli-defs "/CLUSTER/MAPREDUCE/SET")
(maprcli-defs "/CONFIG/LOAD")
(maprcli-defs "/CONFIG/SAVE")
(maprcli-defs "/DASHBOARD/INFO")
(maprcli-defs "/DIALHOME/ACKDIAL")
(maprcli-defs "/DIALHOME/ENABLE")
(maprcli-defs "/DIALHOME/LASTDIALED")
(maprcli-defs "/DIALHOME/METRICS")
(maprcli-defs "/DIALHOME/STATUS")
(maprcli-defs "/DISK/ADD")
(maprcli-defs "/DISK/LIST")
(maprcli-defs "/DISK/LISTALL")
(maprcli-defs "/DISK/REMOVE")
(maprcli-defs "/ENTITY/INFO")
(maprcli-defs "/ENTITY/LIST")
(maprcli-defs "/ENTITY/MODIFY")
(maprcli-defs "/ENTITY/REMOVE")
(maprcli-defs "/JOB/CHANGEPRIORITY")
(maprcli-defs "/JOB/KILL")
(maprcli-defs "/JOB/LINKLOGS")
(maprcli-defs "/JOB/TABLE")
(maprcli-defs "/LICENSE/ADD")
(maprcli-defs "/LICENSE/ADDCRL")
(maprcli-defs "/LICENSE/APPS")
(maprcli-defs "/LICENSE/LIST")
(maprcli-defs "/LICENSE/LISTCRL")
(maprcli-defs "/LICENSE/REMOVE")
(maprcli-defs "/LICENSE/SHOWID")
(maprcli-defs "/NAGIOS/GENERATE")
(maprcli-defs "/NODE/ALLOW-INTO-CLUSTER")
(maprcli-defs "/NODE/CLDBMASTER")
(maprcli-defs "/NODE/FAILOVER")
(maprcli-defs "/NODE/HEATMAP")
(maprcli-defs "/NODE/LIST")
(maprcli-defs "/NODE/LISTCLDBS")
(maprcli-defs "/NODE/LISTCLDBZKS")
(maprcli-defs "/NODE/LISTZOOKEEPERS")
(maprcli-defs "/NODE/MAINTENANCE")
(maprcli-defs "/NODE/MOVE")
(maprcli-defs "/NODE/REMOVE")
(maprcli-defs "/NODE/SERVICES")
(maprcli-defs "/NODE/TOPO")
(maprcli-defs "/RLIMIT/GET")
(maprcli-defs "/RLIMIT/SET")
(maprcli-defs "/SCHEDULE/CREATE")
(maprcli-defs "/SCHEDULE/LIST")
(maprcli-defs "/SCHEDULE/MODIFY")
(maprcli-defs "/SCHEDULE/REMOVE")
(maprcli-defs "/SERVICE/LIST")
(maprcli-defs "/SETLOGLEVEL/CLDB")
(maprcli-defs "/SETLOGLEVEL/FILESERVER")
(maprcli-defs "/SETLOGLEVEL/HBMASTER")
(maprcli-defs "/SETLOGLEVEL/HBREGIONSERVER")
(maprcli-defs "/SETLOGLEVEL/JOBTRACKER")
(maprcli-defs "/SETLOGLEVEL/NFS")
(maprcli-defs "/SETLOGLEVEL/TASKTRACKER")
(maprcli-defs "/STREAM/ASSIGN/LIST")
(maprcli-defs "/STREAM/CREATE")
(maprcli-defs "/STREAM/CURSOR/DELETE")
(maprcli-defs "/STREAM/CURSOR/LIST")
(maprcli-defs "/STREAM/DELETE")
(maprcli-defs "/STREAM/EDIT")
(maprcli-defs "/STREAM/INFO")
(maprcli-defs "/STREAM/PURGE")
(maprcli-defs "/STREAM/REPLICA/ADD")
(maprcli-defs "/STREAM/REPLICA/AUTOSETUP")
(maprcli-defs "/STREAM/REPLICA/EDIT")
(maprcli-defs "/STREAM/REPLICA/LIST")
(maprcli-defs "/STREAM/REPLICA/PAUSE")
(maprcli-defs "/STREAM/REPLICA/REMOVE")
(maprcli-defs "/STREAM/REPLICA/RESUME")
(maprcli-defs "/STREAM/UPSTREAM/ADD")
(maprcli-defs "/STREAM/UPSTREAM/LIST")
(maprcli-defs "/STREAM/UPSTREAM/REMOVE")
(maprcli-defs "/STREAM/TOPIC/CREATE")
(maprcli-defs "/STREAM/TOPIC/DELETE")
(maprcli-defs "/STREAM/TOPIC/EDIT")
(maprcli-defs "/STREAM/TOPIC/INFO")
(maprcli-defs "/STREAM/TOPIC/LIST")
(maprcli-defs "/TABLE/CREATE")
(maprcli-defs "/TABLE/CF/COLPERM/GET")
(maprcli-defs "/TABLE/CF/COLPERM/SET")
(maprcli-defs "/TABLE/CF/COLPERM/DELETE")
(maprcli-defs "/TABLE/CF/CREATE")
(maprcli-defs "/TABLE/CF/DELETE")
(maprcli-defs "/TABLE/CF/EDIT")
(maprcli-defs "/TABLE/CF/LIST")
(maprcli-defs "/TABLE/DELETE")
(maprcli-defs "/TABLE/EDIT")
(maprcli-defs "/TABLE/INFO")
(maprcli-defs "/TABLE/REGION/LIST")
(maprcli-defs "/TABLE/REGION/MERGE")
(maprcli-defs "/TABLE/REGION/PACK")
(maprcli-defs "/TABLE/REGION/SPLIT")
(maprcli-defs "/TABLE/REPLICA/ADD")
(maprcli-defs "/TABLE/REPLICA/AUTOSETUP")
(maprcli-defs "/TABLE/REPLICA/EDIT")
(maprcli-defs "/TABLE/REPLICA/LIST")
(maprcli-defs "/TABLE/REPLICA/PAUSE")
(maprcli-defs "/TABLE/REPLICA/REMOVE")
(maprcli-defs "/TABLE/REPLICA/RESUME")
(maprcli-defs "/TABLE/REPLICA/ELASTICSEARCH/AUTOSETUP")
(maprcli-defs "/TABLE/REPLICA/ELASTICSEARCH/EDIT")
(maprcli-defs "/TABLE/REPLICA/ELASTICSEARCH/LIST")
(maprcli-defs "/TABLE/REPLICA/ELASTICSEARCH/PAUSE")
(maprcli-defs "/TABLE/REPLICA/ELASTICSEARCH/RESUME")
(maprcli-defs "/TABLE/REPLICA/ELASTICSEARCH/REMOVE")
(maprcli-defs "/TABLE/UPSTREAM/ADD")
(maprcli-defs "/TABLE/UPSTREAM/LIST")
(maprcli-defs "/TABLE/UPSTREAM/REMOVE")
(maprcli-defs "/TASK/FAILATTEMPT")
(maprcli-defs "/TASK/KILLATTEMPT")
(maprcli-defs "/TASK/TABLE")
(maprcli-defs "/VIRTUALIP/ADD")
(maprcli-defs "/VIRTUALIP/EDIT")
(maprcli-defs "/VIRTUALIP/LIST")
(maprcli-defs "/VIRTUALIP/MOVE")
(maprcli-defs "/VIRTUALIP/REMOVE")
(maprcli-defs "/VOLUME/AUDIT")
(maprcli-defs "/VOLUME/CONTAINER/MOVE")
(maprcli-defs "/VOLUME/CONTAINER/SWITCHMASTER")
(maprcli-defs "/VOLUME/CREATE")
(maprcli-defs "/VOLUME/FIXMOUNTPATH")
(maprcli-defs "/VOLUME/INFO")
(maprcli-defs "/VOLUME/LINK/CREATE")
(maprcli-defs "/VOLUME/LINK/REMOVE")
(maprcli-defs "/VOLUME/LIST")
(maprcli-defs "/VOLUME/MIRROR/START")
(maprcli-defs "/VOLUME/MIRROR/STOP")
(maprcli-defs "/VOLUME/MODIFY")
(maprcli-defs "/VOLUME/MOUNT")
(maprcli-defs "/VOLUME/MOVE")
(maprcli-defs "/VOLUME/REMOVE")
(maprcli-defs "/VOLUME/RENAME")
(maprcli-defs "/VOLUME/SHOWMOUNTS")
(maprcli-defs "/VOLUME/SNAPSHOT/CREATE")
(maprcli-defs "/VOLUME/SNAPSHOT/LIST")
(maprcli-defs "/VOLUME/SNAPSHOT/PRESERVE")
(maprcli-defs "/VOLUME/SNAPSHOT/REMOVE")
(maprcli-defs "/VOLUME/UNMOUNT")
(maprcli-defs "/VOLUME/UPGRADEFORMAT")


;;(set-host "http://maprdemo:8443/rest")
;;(volume-info :path "/")
;;(volume-list)
